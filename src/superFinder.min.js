async function docSelector(e){for(var n=e.getText(),t=new RegExp(/\.include\s+(\S+)/,"g"),i=n.match(t)||[],o=[],r=0;r<i.length;r++){var s=i[r].match(/\.include\s+(\S+)/m);o[r]=s[1]}if(0===o.length)return null;var c=[];for(const e of o)c.push(vscode.Uri.file(e));return c}function findwhere(e,n,t="loc"){if(".subckt"==n)return vscode.window.showInformationMessage("This is the definition.");var i=e.getText(),o=null;const r=new RegExp("^\\.subckt\\s+"+n,"m"),s=i.search(r),c=new RegExp("^"+n,"m"),l=i.search(c);if(s>-1){const r=e.positionAt(s);var f=i.replace(/[\s\n]/gm,"o");const c=f.indexOf("ends",s),l=f.indexOf("s",c),u=e.positionAt(l+1),a=new vscode.Range(r,u);o=new vscode.Location(e.uri,r);const d=e.lineAt(r).text.indexOf(n);if("loc"===t)return o;if("hitline"===t)return e.lineAt(position);if("hitchar"===t)return d;if("range"===t)return e.getText(a);console.log("mode isn't defined")}else if(l>-1){const i=e.positionAt(l),r=e.lineAt(i);o=new vscode.Location(e.uri,i);const s=e.lineAt(i).text.indexOf(n);if("loc"===t)return o;if("hitline"===t)return e.lineAt(position);if("hitchar"===t)return s;if("range"===t)return r.text;console.log("mode isn't defined")}else console.log("search failed");return null}const vscode=require("vscode");exports.superFinder=async function(e,n,t){var i=await docSelector(e);if(null!=i)for(const e of i){const i=await vscode.workspace.openTextDocument(e);var o=findwhere(i,n,t);if(null!=o)return o}o=findwhere(e,n,t);return null!=o?o:null};